-- MODEL SIGNATURES --

sig Report{
    reportID: one Int,
	location: one Location
}

abstract sig Guest {
}

sig User extends Guest{
	userID: one Int,
	reports: set Report
}{#reports>0}

sig Authority extends Guest{	
	sm: one SuggestionsManager,
	authID: one Int,
	rm: one ReportManager,
	trafficTickets: set TrafficTicket,
	municipality: one Municipality
}

one sig ReportManager{
	reports: set Report
}

sig TrafficTicket{
	ticketID: one Int,
	report: one Report,
	municipality: one Municipality
}

sig Location{
	municipality: one Municipality
}

sig Municipality{}

one sig SuggestionsManager{
	rm: one ReportManager,
	municipalities: set Municipality
}


-- FACTS THAT DEFINE THE MODEL --

-- define unique key for Authority --
fact uniqueAuthorityID{
	no disj a1, a2: Authority | a1.authID = a2.authID			
}

-- define unique key for Report --
fact uniqueReportID{
	no disj r1, r2: Report | r1.reportID = r2.reportID			
}


-- define unique key for User --
fact uniqueUserID{
	no disj u1, u2: User | u1.userID = u2.userID			
}

-- define unique key for TrafficTicket --
fact uniqueTrafficTicketID{
	no disj tt1, tt2: TrafficTicket | tt1.ticketID = tt2.ticketID			
}

fact ownReport{
	-- all report are generated by only one user --
	all r: Report |
		no disj u1,  u2: User |
			r in u1.reports and r in u2.reports

	-- all report are generated by someone --
	all r: Report |
		one u: User |
			r in u.reports
}

fact ownTrafficTicket{
	-- all traffic tickets are generated by only one authority --
	all tt: TrafficTicket |
		no disj a1,  a2: Authority |
			tt in a1.trafficTickets and tt in a2.trafficTickets

	-- all traffic tickets are generated by someone --
	all tt: TrafficTicket |
		one a: Authority |
			tt in a.trafficTickets
}

--  Report can't stay into different TrafficTicket --
fact trafficTicketReport{
	all r: Report |
		no disj tt1, tt2: TrafficTicket | r = tt1.report and
		                                  r = tt2.report
}




-- all the Reports are managed by the ReportManager
fact manageOnce{
	all r: Report | 
		one rm: ReportManager | 
			r in rm.reports
}

/* Authority can generate TrafficTicket only for violations made
     into the same municipality in which it is registered */
fact checkAuthorityZone{
	all tt: TrafficTicket |
		one r: Report |
			r = tt.report and tt.municipality =
				        r.location.municipality

	all tt: TrafficTicket |
		one a: Authority |
			tt in a.trafficTickets and a.municipality =
			                            tt.municipality
}

-- SuggentionsManager must see all the Municipalities in order to collect data --
fact SugManagerSeeAllMunicipalities {
	all m: Municipality |
		one sm: SuggestionsManager |
			m in sm.municipalities
}

fact f1{
	all m:Municipality |
		m in Location.municipality
}

fact f2{
	all l:Location |
		l in Report.location
}

pred show{
        #User = 2
		#Authority = 3
		#Report = 3
        --#TrafficTicket = 2
		--#Location = #Report
		--#Location = #Municipality
		--#Municipality = #Authority
    }

run show for 5
